#!/usr/bin/env bash
#
# Run the APALACHE model checker
#
# Igor Konnov, 2018-2019

DIR=`dirname $0`
DIR=`cd "$DIR/.."; pwd`

# try to find either a release jar, or a local build
DISTS=`mktemp /tmp/apalache-dists.XXXX`
find >$DISTS "$DIR" "$DIR/target/scala-2.12" \
    -maxdepth 1 -name "apalache-pkg-*-full.jar"

case `cat $DISTS | wc -l | sed 's/[[:space:]]*//g'` in
    1)
        JAR=`head -n 1 $DISTS`
        ;;
    0) 
        echo "ERROR: Distribution jar not found. Did you run make package?"
        exit 1
        ;;
    *) 
        echo "Found multiple apalache packages:"
        cat $DISTS
        echo ""
        echo "To resolve this, run:"
        echo "  make clean package"
        exit 1
        ;;
esac
rm -f "$DISTS"

JVM_ARGS=${JVM_ARGS:-""}

# Check of the heap size is already set
if ! [[ "$JVM_ARGS" =~ -Xmx ]]
then
    # If not, set our default heap size
    JVM_ARGS="${JVM_ARGS} -Xmx4096m"
fi

# Append TLA_PATH to JVM_ARGS, if it is set
if [ -n "$TLA_PATH" ]
then
    JVM_ARGS="$JVM_ARGS -DTLA-Library=$TLA_PATH"
fi

# a trap for SIGINT and SIGTERM
sigterm() {
    echo "Premature termination requested. Killing apalache-mc (pid $child)" 1>&2
    trap - SIGTERM SIGINT # unregister to avoid recursion below
    # send termination to the child process
    kill SIGTERM $child 2>/dev/null
}

trap sigterm SIGTERM SIGINT

# Check whether the CLI args contains the debug flag
if [[ "$*" =~ '--debug' ]]
then
    echo "# Tool home: $DIR"
    echo "# Package:   $JAR"
    echo "# JVM args: $JVM_ARGS"
    echo "#"
fi

# run java in the background in order to react to SIGTERM
java $JVM_ARGS -jar "$JAR" "$@" &
child=$!
wait "$child"
